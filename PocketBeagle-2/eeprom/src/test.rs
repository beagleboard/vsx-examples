use super::*;

#[test]
fn size() {
    assert_eq!(std::mem::size_of::<Contents>(), 62);
}

#[test]
fn transmute() {
    let data: [u8; 62] = [
        0xaa, 0x55, 0x33, 0xee, 0x01, 0x37, 0x00, 0x10, 0x2e, 0x00, 0x50, 0x4f, 0x43, 0x4b, 0x45,
        0x54, 0x42, 0x45, 0x41, 0x47, 0x4c, 0x32, 0x41, 0x30, 0x30, 0x47, 0x41, 0x30, 0x30, 0x30,
        0x30, 0x30, 0x30, 0x47, 0x41, 0x30, 0x41, 0x30, 0x30, 0x30, 0x30, 0x31, 0x33, 0x34, 0x32,
        0x34, 0x50, 0x42, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x11, 0x02, 0x00, 0xa8,
        0x12, 0xfe,
    ];
    let expected = Contents {
        magic_number: [0xaa, 0x55, 0x33, 0xee],
        hdr1: Header {
            id: 0x01,
            len: u16::from_ne_bytes([0x37, 0x00]),
        },
        hdr2: Header {
            id: 0x10,
            len: u16::from_ne_bytes([0x2e, 0x00]),
        },
        board_info: BoardInfo {
            name: *b"POCKETBEAGL2A00G",
            version: *b"A0",
            proc_number: *b"0000",
            variant: *b"0G",
            pcb_revision: *b"A0",
            schematic_bom_revision: *b"A0",
            software_revision: *b"00",
            vendor_id: *b"01",
            build_week: *b"34",
            build_year: *b"24",
            serial: *b"PB20000001",
        },
        hdr3: Header {
            id: 0x11,
            len: u16::from_ne_bytes([0x02, 0x00]),
        },
        ddr_info: u16::from_ne_bytes([0xa8, 0x12]),
        termination: 0xfe,
    };

    let contents = Contents::from_bytes(data);

    assert_eq!(contents, expected);
}
